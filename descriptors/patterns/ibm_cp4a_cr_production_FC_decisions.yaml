###############################################################################
##
##Licensed Materials - Property of IBM
##
##(C) Copyright IBM Corp. 2021, 2023. All Rights Reserved.
##
##US Government Users Restricted Rights - Use, duplication or
##disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
##
###############################################################################
apiVersion: icp4a.ibm.com/v1
kind: ICP4ACluster
metadata:
  name: icp4adeploy
  labels:
    app.kubernetes.io/instance: ibm-dba
    app.kubernetes.io/managed-by: ibm-dba
    app.kubernetes.io/name: ibm-dba
    release: 24.0.0
spec:

  ## MUST exist, used to accept ibm license, valid value only can be "accept"
  ibm_license: ""

  #################################################################################################################
  ##  The contents of this template CR file reflect only the specific parameters and configuration
  ##  settings applicable to the represented ICP4A capability.
  ##
  ##  These values/configuration sections are to be used when manually assembling or updating the main
  ##  ICP4A CR that is being applied in order to install an ICP4A environment.
  ##
  ##  If you are in the process of preparing a new install of an ICP4A environment,
  ##  you should merge the required values and configuration sections from this file into the
  ##  starting point CR template: ibm_cp4a_cr_enterprise_foundation.yaml available in the
  ##  same location as this template.
  ##
  ##  If you updating an existing ICP4A environment, you should merge the required values and configuration
  ##  sections from this template in the main ICP4A CR file already applied in the environment.
  ##
  ######################################################################################################################

  shared_configuration:

    ## CP4A patterns or capabilities to be deployed. This CR represents Operational Decision Manager "decisions" pattern
    ## that brings Decision Center, Rule Execution Server and Decision Runtime, based on the user specification in the
    ## sc_optional_components specification
    sc_deployment_patterns: decisions

    # Optional: You can specify a profile size for ODM if different from CloudPak - valid values are small,medium,large - default is small.
    # Resources in this file are reflecting small profile ones.
    # sc_deployment_profile_size: "small"

    ## The optional components to be installed if listed here.
    ## This is normally populated by the deploy script based on input from the user.
    ## User can also manually specify the optional components to be deployed here.
    ## This pattern has has 5: decisionCenter (Business Console), decisionRunner (Testing and Simulation runtime), decisionServerRuntime (Rule Execution Server), bai (Business Automation Insight), ums (User Management Service) optionals components.
    ## If decisionCenter is set, you also have to set the 'odm_configuration.decisionCenter.enabled' flag to true to install it.
    ## If decisionRunner is set, you also have to set the 'odm_configuration.decisionRunner.enabled' flag to true to install it.
    ## If decisionServerRuntime is set, you also have to set the 'odm_configuration.decisionRuntime.enabled' flag to true to install it.
    sc_optional_components:

    ## The deployment context, which has a default value of "CP4A".  Unless you are instructed to change this value or
    ## know the reason to change this value, please leave the default value.
    sc_deployment_context: "CP4A"

    ## If your Openshift cluster is configured for Hugepages and you want the applicable deployment resources to consume Hugepages.
    ## You must set "true" for sc_hugepages.enabled. Default is "false".
    ## You must set type for "Hugepages" like hugepages-2Mi or hugepages-1Gi. Default is "hugepages-2Mi".
    ## You must set size for value which is suitable for Openshift cluster.
    sc_hugepages:
      enabled: false
      type: ""
      value: ""

    ## The platform to be deployed specified by the user.  Possible values are: OCP, ROKS, and other.  This is normally populated by the User script
    ## based on input from the user.
    sc_deployment_platform:
    ## You can provide your own driver to use your own external database by setting the sc_drivers_url parameter.
    ## The sc_driver_url parameter accepts compressed files (in .zip, .tar, .tar.gz, .tar.bz2, or .tar.xz formats) with the following structure: jdbc/db2|oracle|postgresql|sqlserver/driver_files.
    sc_drivers_url:

    ## Optional setting for secure computing mode (seccomp) profile for CP4A containers.  The default seccomp profile is RuntimeDefault on OCP 4.11 (k8s v1.24) or higher. seccomp profile won't be created on OCP 4.10 (k8s v1.23) or lower.
    ## For more information on seccomp please refer to https://kubernetes.io/docs/tutorials/security/seccomp/ and https://docs.openshift.com/container-platform/4.12/security/seccomp-profiles.html
    ## NOTE: Defining a custom, localhost seccomp profile that is stricter than the default RuntimeDefault profile may cause our pods fail to start.  This custom profile should be created at the worker nodes.
    sc_seccomp_profile:
    #  type: # RuntimeDefault, Localhost, Unconfined
    #  localhost_profile: # Local path of custom seccomp profile when type `Localhost` is used. The custom profile must be accessible by the pod and must exist locally on all worker nodes.  For example: `/profiles/fine-grained.json`.

    ## Enable/disable FIPS mode for the deployment (default value is "false")
    ## Note: If set as "true", in order to complete enablement of FIPS for CP4BA, please refer to "FIPS wall" configuration in IBM documentation.
    enable_fips: false

    ## Optional Define how IP families (IPv4 and IPv6) are handled for the Service.
    ## This setting becomes particularly relevant in dual-stack environments where both IPv4 and IPv6 are enabled.
    ## Here are the options you can specify for ipFamilyPolicy: SingleStack , PreferDualStack , RequireDualStack
    sc_service_ip_family_policy:

    ## Optional Specify which IP families (IPv4 or IPv6) a Service should use.
    ## This parameter works in conjunction with the ipFamilyPolicy to define the IP addressing behaviors for the Service.
    sc_service_ip_families:

    ## If a cluster is configured for multiple availability zones (AZ) and the parameter sc_is_multiple_az is set to true, then the pods are spread across all the zones.
    ## By default, the sc_is_multiple_az parameter is set to false. When the value is set to true, the pods of the CP4BA deployment are spread across your user-defined topology domains.
    ## The pod API includes a spec.topologySpreadConstraints field, which is used by the CP4BA operator to configure it.
    sc_is_multiple_az: false

  ## The beginning section of database configuration for CP4A
  datasource_configuration:

    ## Provide the common database configuration for Decision Center and Decision Server
    dc_odm_datasource:
      ## Provide the database type from your infrastructure.
      ## The possible values are "db2" / "postgresql" / "sqlserver" / "oracle".
      dc_database_type: "<Required>"
      ## Provide the database server name or IP address of the database server.
      database_servername: "<Required>"
      ## Provide the database server port.  For Db2, the default is "50000".
      dc_common_database_port: "<Required>"
      ## Provide the name of the database for ODM.  For example: "ODMDB"
      dc_common_database_name: "<Required>"
      ## Optional. Provide the URL of the Oracle database for ODM. For example: "jdbc:oracle:thin:@servername:1521:ODMDB"
      ## Compulsory for Oracle SSL using PROTOCOL=TCPS. For example: "jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCPS)(HOST=servername)(PORT=2484))(CONNECT_DATA=(SERVICE_NAME=servicename)))"
      dc_common_database_url: ""
      ## The name of the secret that contains the credentials to connect to the database.
      dc_common_database_instance_secret: "<Required>"
      ## Set to true when the database is using SSL
      dc_common_ssl_enabled: true
      ## If SSL is used to secure the database connection, specify the name of the SSL secret.
      dc_ssl_secret_name: "<Required>"
      ## Operator will now have a capability to automatically provision an EDBPostgres instance upon request for Production/Enterprise deployment
      ## If you want PostgresDB to be created for a GCD database, set this parameter to true
      # dc_use_postgres: false

    ## Provide the Decision Center database configuration
    dc_odm_decisioncenter_datasource:
      ## Provide the database type from your infrastructure.
      ## The possible values are "db2" / "postgresql" / "sqlserver" / "oracle".
      database_type: "<Required>"
      ## Provide the database server name or IP address of the database server.
      database_servername: "<Required>"
      ## Provide the database server port.  For Db2, the default is "50000".
      database_port: "<Required>"
      ## Provide the name of the database for ODM.  For example: "ODMDB"
      database_name: "<Required>"
      ## Optional. Provide the URL of the Oracle database for ODM. For example: "jdbc:oracle:thin:@servername:1521:ODMDB"
      ## Compulsory for Oracle SSL using PROTOCOL=TCPS. For example: "jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCPS)(HOST=servername)(PORT=2484))(CONNECT_DATA=(SERVICE_NAME=servicename)))"
      database_url: ""
      ## The name of the secret that contains the credentials to connect to the database.
      database_instance_secret: "<Required>"
      ## Set to true when the database is using SSL
      ssl_enabled: true
      ## If SSL is used to secure the database connection, specify the name of the SSL secret.
      ssl_secret_name: "<Required>"
      ## Operator will now have a capability to automatically provision an EDBPostgres instance upon request for Production/Enterprise deployment
      ## If you want PostgresDB to be created for a GCD database, set this parameter to true
      # dc_use_postgres: false

    ## Provide the Decision Server database configuration
    dc_odm_decisionserver_datasource:
      ## Provide the database type from your infrastructure.
      ## The possible values are "db2" / "postgresql" / "sqlserver" / "oracle".
      database_type: "<Required>"
      ## Provide the database server name or IP address of the database server.
      database_servername: "<Required>"
      ## Provide the database server port.  For Db2, the default is "50000".
      database_port: "<Required>"
      ## Provide the name of the database for ODM.  For example: "ODMDB"
      database_name: "<Required>"
      ## Optional. Provide the URL of the Oracle database for ODM. For example: "jdbc:oracle:thin:@servername:1521:ODMDB"
      ## Compulsory for Oracle SSL using PROTOCOL=TCPS. For example: "jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCPS)(HOST=servername)(PORT=2484))(CONNECT_DATA=(SERVICE_NAME=servicename)))"
      database_url: ""
      ## The name of the secret that contains the credentials to connect to the database.
      database_instance_secret: "<Required>"
      ## Set to true when the database is using SSL
      ssl_enabled: true
      ## If SSL is used to secure the database connection, specify the name of the SSL secret.
      ssl_secret_name: "<Required>"
      ## Operator will now have a capability to automatically provision an EDBPostgres instance upon request for Production/Enterprise deployment
      ## If you want PostgresDB to be created for a GCD database, set this parameter to true
      # dc_use_postgres: false

  ########################################################################
  ########     IBM Operational Decision Manager Configuration     ########
  ########################################################################
  odm_configuration:

    # Allow to activate more trace for ODM in the Operator pod.
    debug: false

    # You can specify a profile size for ODM if different from CloudPak - valid values are small,medium,large.
    # Custom value allows to override the odm resources even if the shared_configuration.sc_deployment_profile_size is set.
    # deployment_profile_size: "small"

    # Allow to specify which version of ODM you want to deploy.
    # Supported version > 19.0.2
    # If omitted the latest version will be used.
    version: 24.0.0

    image:
      # Specify to override the tag docker images in case of an interim fix.
      tag: "24.0.0-IF001"
      # Specify the pull policy for the Docker images. See Kuberntes documentation for more inforations.
      # Possible values : IfNotPresent, Always, Never
      pullPolicy: IfNotPresent
      # Specify the repository used to retrieve the Docker images if you do not want to use the default one.
      # If not specified use the shared_configuration.sc_image_repository.
      repository: cp.icr.io/cp/cp4a/odm

    ## Decision Server Runtime parameters
    decisionServerRuntime:
      # Specify whether to enable Decision Server Runtime.
      enabled: true
      # Specify to override the tag or digest for the decision server docker image.
      tagOrDigest:
      # Specify the number of Decision Server Runtime pods.
      # The default value is set to 1. For high availability, use a value of 2 so a backup pod is ready to immediately take over if a failure occurs.
      replicaCount: 1
      # Specify the name of the configMap the wanted logging options. If left empty, default logging options are used.
      loggingRef:
      # Specify the name of the configMap the wanted JVM options. If left empty, default JVM options are used.
      jvmOptionsRef:
      # Specify the name of the configmap that contains the XU configuration property file.
      xuConfigRef:
      # Specify the name of the configmap that contains the web-configuration.properties file. The content of this properties file allows you to customize the Decision Server Runtime web application.
      webConfigRef:
      resources:
        requests:
          # Specify the requested CPU.
          cpu: 500m
          # Specify the requested memory.
          memory: 2Gi
          ephemeral-storage: 50Mi
        limits:
          # Specify the CPU limit.
          cpu: 1
          # Specify the memory limit.
          memory: 2Gi
          ephemeral-storage: 500Mi
      # Specify the node selector term match expression list to manage node affinity.
      nodeAffinity:
      # Specify whether to enable autoscaling for Decision Server Runtime.
      autoscaling:
        enabled: false
        # Specify the minimum number of replicas.
        minReplicas: 1
        # Specify the maximum number of replicas.
        maxReplicas: 3
        # Specify the target average utilization (in percentage of cpu utilization).
        targetAverageUtilization: 75
      # Specify the labels to add to Decision Server Runtime deployment.
      labels: {}
      networkPolicy:
        #Specify the Decision Server Runtime egress network policy.
        egress:
        #Specify the Decision Server Runtime ingress network policy.
        ingress:

    ## Decision Server Console parameters
    decisionServerConsole:
      # Specify to override the tag or digest for the decision server console docker image.
      tagOrDigest:
      # Specify the name of the configMap the wanted logging options. If left empty, default logging options are used.
      loggingRef:
      # Specify the name of the configMap the wanted JVM options. If left empty, default JVM options are used.
      jvmOptionsRef:
      # Specify the title name for the Decision Server Console web page. If left empty, the default title name is used.
      title:
      # Specify a description for the Decision Server Console. If left empty, the default description is used.
      description:
      resources:
        requests:
          # Specify the requested CPU.
          cpu: 500m
          # Specify the requested memory.
          memory: 1Gi
          ephemeral-storage: 50Mi
        limits:
          # Specify the CPU limit.
          cpu: 500m
          # Specify the memory limit.
          memory: 1Gi
          ephemeral-storage: 500Mi
      # Specify the node selector term match expression list to manage node affinity.
      nodeAffinity:
      # Specify the labels to add to Decision Server Runtime deployment.
      labels: {}
      networkPolicy:
        #Specify the Decision Server Console egress network policy.
        egress:
        #Specify the Decision Server Console ingress network policy.
        ingress:

    ## Decision Center parameters
    decisionCenter:
      # Specify whether to enable Decision Center.
      enabled: true
      # Specify to override the tag or digest for the decision center docker image.
      tagOrDigest:
      # Specify the persistence locale for Decision Center.
      # Possible values  "ar_EG" (Arabic - Egypt), "zh_CN" (Chinese - China), "zh_TW" (Chinese - Taiwan)
      # "nl_NL" (Netherlands), "en_GB" (English - United Kingdom), "en_US" (English - United States),
      # "fr_FR" (French - France), "de_DE" (German - Germany), "iw_IL" (Hebrew - Israel), "it_IT" (Italian - Italy),
      # "ja_JP" (Japanese - Japan) , "ko_KR" (Korean - Korea), "pl_PL" (Polish - Poland),
      # "pt_BR" (Portuguese - Brazil), "ru_RU" (Russian - Russia), "es_ES" (Spanish - Spain)
      persistenceLocale: en_US
      # Specify the number of Decision Center pods.
      # The default value is set to 1. For high availability, use a value of 2 so a backup pod is ready to immediately take over if a failure occurs.
      replicaCount: 1
      # Persistent Volume Claim to access the custom libraries
      customlibPvc:
      # Specify the name of the configMap the wanted logging options. If left empty, default logging options are used.
      loggingRef:
      # Specify the name of the configMap the wanted JVM options. If left empty, default JVM options are used.
      jvmOptionsRef:
      # Specify whether to disable the ALL_AUTHENTICATED_USER authorization for rtsUsers.
      disableAllAuthenticatedUser: false
      # Specify the name of the configmap that contains the web-configuration.properties file. The content of this properties file allows you to customize the Decision Center web application.
      webConfigRef:
      resources:
        requests:
          # Specify the requested CPU.
          cpu: 1
          # Specify the requested memory.
          memory: 4Gi
          ephemeral-storage: 50Mi
        limits:
          # Specify the CPU limit.
          cpu: 1
          # Specify the memory limit.
          memory: 4Gi
          ephemeral-storage: 500Mi
      # Specify the node selector term match expression list to manage node affinity.
      nodeAffinity:
      # Specify whether to enable autoscaling for Decision Center.
      autoscaling:
        enabled: false
        # Specify the minimum number of replicas.
        minReplicas: 1
        # Specify the maximum number of replicas.
        maxReplicas: 3
        # Specify the target average utilization (in percentage of cpu utilization).
        targetAverageUtilization: 75
      # Specify the labels to add to Decision Center deployment.
      labels: {}
      networkPolicy:
        #Specify the Decision Center egress network policy.
        egress:
        #Specify the Decision Center ingress network policy.
        ingress:

    ## Decision Runner parameters
    decisionRunner:
      # Specify whether to enable Decision Runner.
      enabled: true
      # Specify to override the tag or digest for the decision runner docker image.
      tagOrDigest:
      # Specify the number of Decision Runner pods.
      # The default value is set to 1. For high availability, use a value of 2 so a backup pod is ready to immediately take over if a failure occurs.
      replicaCount: 1
      # Specify the name of the configMap the wanted logging options. If left empty, default logging options are used.
      loggingRef:
      # Specify the name of the configMap the wanted JVM options. If left empty, default JVM options are used.
      jvmOptionsRef:
      resources:
        requests:
          # Specify the requested CPU.
          cpu: 500m
          # Specify the requested memory.
          memory: 2Gi
          ephemeral-storage: 50Mi
        limits:
          # Specify the CPU limit.
          cpu: 500m
          # Specify the memory limit.
          memory: 2Gi
          ephemeral-storage: 500Mi
      # Specify the node selector term match expression list to manage node affinity.
      nodeAffinity:
      # Specify whether to enable autoscaling for Decision Runner.
      autoscaling:
        enabled: false
        # Specify the minimum number of replicas.
        minReplicas: 1
        # Specify the maximum number of replicas.
        maxReplicas: 3
        # Specify the target average utilization (in percentage of cpu utilization).
        targetAverageUtilization: 75
      # Specify the labels to add to Decision Runner deployment.
      labels: {}
      networkPolicy:
        #Specify the Decision Runner egress network policy.
        egress:
        #Specify the Decision Runner ingress network policy.
        ingress:

    externalDatabase:
      ## Specify the database driver url. Optionally specify a list of driversUrl using
      driversUrl: []

    ## Fill in the parameters to use an external database configured by a secret.
    externalCustomDatabase:
      # Specify the name of the secret that contains the datasource configuration to use.
      datasourceRef:

    readinessProbe:
      # Specify the number of seconds after the container has started before readiness probe is initiated.
      initialDelaySeconds: 5
      # Specify how often (in seconds) to perform the probe.
      periodSeconds: 5
      # Specify how many times Kubernetes will try before giving up when a pod starts and the probe fails. Giving up means marking the pod as Unready.
      failureThreshold: 45
      # Specify the number of seconds after which the readiness probe times out.
      timeoutSeconds: 5

    livenessProbe:
      # Specify the number of seconds after the container has started before liveness probe is initiated.
      initialDelaySeconds: 300
      # Specify how often (in seconds) to perform the probe.
      periodSeconds: 30
      # Specify how many times Kubernetes will try before giving up when a pod starts and the probe fails. Giving up means restarting the pod.
      failureThreshold: 4
      # Specify the number of seconds after which the liveness probe times out.
      timeoutSeconds: 5

    startupProbe:
      # Specify the number of seconds after the container has started before startup probe is initiated.
      initialDelaySeconds: 15
      # Specify how often (in seconds) to perform the probe.
      periodSeconds: 20
      # Specify how many times Kubernetes will try before giving up when a pod starts and the probe fails. Giving up means restarting the pod.
      failureThreshold: 30
      # Specify the number of seconds after which the startup probe times out.
      timeoutSeconds: 5

    customization:
      # Specify the name of the secret that contains the user registry configuration to use. If the parameter is empty, a default basic registry is used.
      authSecretRef:
      # Specify a list of secrets that encapsulate certificates in PEM format to be included in the truststore.
      # This list of certificates is merged with the Cloud Pak certificate list defined by the shared configuration trusted_certificate_list parameter.
      trusted_certificate_list:
      # Specify the name of the topic that is used to send ODM events to the Kafka provider.
      bai_kafka_topic:
      # Specify the node selector term match expression list to manage node affinity.
      nodeAffinity:
      # Specify the labels to add to all kubernetes resources.
      labels: {}

    networkPolicy:
      # Enable creation of NetworkPolicy resources.
      enabled: true
      # Specify the Overall Components egress network policy.
      egress:
      # Specify the Overall Components ingress network policy.
      ingress:

    # Enable SCIM datasource in Decision Center allowing to import group and users.
    show_scim_connection: false
