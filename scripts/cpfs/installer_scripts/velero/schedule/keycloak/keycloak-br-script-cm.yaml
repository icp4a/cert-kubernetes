apiVersion: v1
kind: ConfigMap
metadata:
  name: keycloak-br-configmap
  namespace: <keycloak namespace>
  labels:
    foundationservices.cloudpak.ibm.com: keycloak-data
data:
  br_keycloak.sh: |
    #!/usr/bin/env bash

    # Licensed Materials - Property of IBM
    # Copyright IBM Corporation 2023. All Rights Reserved
    # US Government Users Restricted Rights -
    # Use, duplication or disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
    #
    # This is an internal component, bundled with an official IBM product.
    # Please refer to that particular license for additional information.

    # ---------- Command arguments ----------

    set -o errtrace
    set -o errexit

    MODE=$1
    KEYCLOAK_NAMESPACE=$2

    BACKUP_DIR=/keycloak/keycloak-backup

    function main {
        if [[ $MODE == "backup" ]]; then
            info "Mode set to backup, beginning backup process."
            backup
            success "Backup completed successfully."
        elif [[ $MODE == "restore" ]]; then
            info "Mode is set to restore, beginning restore process."
            wait_for_keycloak
            restore
            success "Restore completed successfully."
        else
            error "Mode selected is $MODE. Please use either \"backup\" or \"restore\"."
        fi
    }

    function backup {
        mkdir -p $BACKUP_DIR/database
        mkdir -p $BACKUP_DIR/secrets
        CNPG_PRIMARY_POD=`oc get cluster.postgresql.k8s.enterprisedb.io keycloak-edb-cluster -o jsonpath="{.status.currentPrimary}" -n $KEYCLOAK_NAMESPACE` && \
        oc -n $KEYCLOAK_NAMESPACE exec -t $CNPG_PRIMARY_POD -c postgres -- mkdir -p /run/keycloak_backup && \
        oc -n $KEYCLOAK_NAMESPACE exec -t $CNPG_PRIMARY_POD -c postgres -- pg_dump -v --username=postgres --dbname=keycloak -f /run/keycloak_backup/keycloak_db_backup.dump --format=c

        #Move backup to backup location
        info "Copy backup file."
        oc cp $KEYCLOAK_NAMESPACE/$CNPG_PRIMARY_POD:/run/keycloak_backup/keycloak_db_backup.dump $BACKUP_DIR/database/keycloak_db_backup.dump

        #backup cs-keycloak-initial-admin secret
        info "Backup cs-keycloak-initial-admin secret"
        oc extract -n $KEYCLOAK_NAMESPACE secret/cs-keycloak-initial-admin --to=$BACKUP_DIR/secrets/ --confirm || warning "Failed to backup secret/cs-keycloak-initial-admin in namespace ${KEYCLOAK_NAMESPACE}"
    }

    function wait_for_keycloak {
        job_name="cs-cloudpak-realm"
        info "Waiting for job $job_name to complete in namespace $KEYCLOAK_NAMESPACE."
        job_exists=$(oc get job $job_name -n $KEYCLOAK_NAMESPACE --no-headers || echo fail)
        if [[ $job_exists != "fail" ]]; then
            completed=$(oc get job $job_name -n $KEYCLOAK_NAMESPACE --no-headers | awk '{print $2}')
            retry_count=20
            while [[ $completed != "1/1" ]] && [[ $retry_count > 0 ]]
            do
                info "Wait for job $job_name to complete. Try again in 15s."
                sleep 15
                completed=$(oc get job $job_name -n $KEYCLOAK_NAMESPACE --no-headers | awk '{print $2}')
                retry_count=$retry_count-1
            done

            if [[ $retry_count == 0 ]] && [[ $completed != "1/1" ]]; then
                error "Timed out waiting for job $job_name."
            else
                info "Job $job_name completed, ready for restore."
            fi
        else
            warning "Job $job_name not present, proceeding with restore."
        fi
    }
    
    function restore {
        #restore initial admin secret
        info "Restoring secret cs-keycloak-initial-admin..."
        oc patch secret -n $KEYCLOAK_NAMESPACE cs-keycloak-initial-admin --patch="{\"data\": {\"password\": \"$(base64 -w0 $BACKUP_DIR/secrets/password)\" }}"

        CNPG_PRIMARY_POD=`oc get cluster.postgresql.k8s.enterprisedb.io keycloak-edb-cluster -o jsonpath="{.status.currentPrimary}" -n $KEYCLOAK_NAMESPACE` 
        oc exec $CNPG_PRIMARY_POD -n $KEYCLOAK_NAMESPACE -- mkdir -p /run/keycloak_backup
        oc cp $BACKUP_DIR/database/keycloak_db_backup.dump $KEYCLOAK_NAMESPACE/$CNPG_PRIMARY_POD:/run/keycloak_backup/keycloak_db_backup.dump
        oc -n $KEYCLOAK_NAMESPACE exec -t $CNPG_PRIMARY_POD -c postgres -- psql -U postgres -c "\list" -c "\dn" -c "\du"
        oc -n $KEYCLOAK_NAMESPACE exec -t $CNPG_PRIMARY_POD -c postgres -- pg_restore -U postgres --dbname keycloak --format=c --clean --exit-on-error -v /run/keycloak_backup/keycloak_db_backup.dump
        oc -n $KEYCLOAK_NAMESPACE exec -t $CNPG_PRIMARY_POD -c postgres -- psql -U postgres -c "\list" -c "\dn" -c "\du"

        #restart keycloak pod
        info "Restarting Keycloak pods..."
        oc delete pods -l app=keycloak -n $KEYCLOAK_NAMESPACE
    }

    function msg() {
        printf '%b\n' "$1"
    }

    function success() {
        msg "\33[32m[✔] ${1}\33[0m"
    }

    function warning() {
        msg "\33[33m[✗] ${1}\33[0m"
    }

    function error() {
        msg "\33[31m[✘] ${1}\33[0m"
        exit 1
    }

    function title() {
        msg "\33[34m# ${1}\33[0m"
    }

    function info() {
        msg "[INFO] ${1}"
    }

    main $*
